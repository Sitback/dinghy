require 'tempfile'

require 'dinghy/daemon'

class Dnsmasq
  include Dinghy::Daemon
  RESOLVER_DIR = Pathname("/etc/resolver")

  attr_reader :machine, :resolver_file, :dinghy_domain

  def initialize(machine, dinghy_domain)
    @machine = machine
    self.dinghy_domain = dinghy_domain || "docker"
  end

  def dinghy_domain=(dinghy_domain)
    @dinghy_domain = dinghy_domain
    @resolver_file = RESOLVER_DIR.join(@dinghy_domain)
  end

  def up
    unless resolver_configured?
      configure_resolver!
    end
    super
  end

  def name
    "DNS"
  end

  def configure_resolver!
    puts "setting up DNS resolution, this will require sudo"
    unless RESOLVER_DIR.directory?
      system!("creating #{RESOLVER_DIR}", "sudo", "mkdir", "-p", RESOLVER_DIR)
    end
    Tempfile.open('dinghy-dnsmasq') do |f|
      f.write(resolver_contents)
      f.close
      system!("creating #{@resolver_file}", "sudo", "cp", f.path, @resolver_file)
      system!("creating #{@resolver_file}", "sudo", "chmod", "644", @resolver_file)
    end
    system!("restarting mDNSResponder", "sudo", "killall", "mDNSResponder")
  end

  def resolver_configured?
    @resolver_file.exist? && File.read(@resolver_file) == resolver_contents
  end

  def resolver_contents; <<-EOS.gsub(/^    /, '')
    # Generated by dinghy
    nameserver 127.0.0.1
    port 19322
    EOS
  end

  protected

  def command
    [
      "#{Dinghy.brew}/sbin/dnsmasq",
      "--no-daemon",
      "--listen-address=127.0.0.1",
      "--port=19322",
      "--bind-interfaces",
      "--no-resolv",
      "--address=/.#{dinghy_domain}/#{machine.vm_ip}"
    ]
  end
end
