require 'tempfile'

require 'dinghy/daemon'

class Dnsmasq
  include Dinghy::Daemon
  RESOLVER_DIR = Pathname("/etc/resolver")
  RESOLVER_FILE = RESOLVER_DIR.join("docker")

  attr_reader :machine

  def initialize(machine)
    @machine = machine
  end

  def up
    unless resolver_configured?
      configure_resolver!
    end
    super
  end

  def name
    "DNS"
  end

  def configure_resolver!
    puts "setting up DNS resolution, this will require sudo"
    unless RESOLVER_DIR.directory?
      system!("creating #{RESOLVER_DIR}", "sudo", "mkdir", "-p", RESOLVER_DIR)
    end
    Tempfile.open('dinghy-dnsmasq') do |f|
      f.write(resolver_contents)
      f.close
      system!("creating #{RESOLVER_FILE}", "sudo", "cp", f.path, RESOLVER_FILE)
      system!("creating #{RESOLVER_FILE}", "sudo", "chmod", "644", RESOLVER_FILE)
    end
    system!("restarting mDNSResponder", "sudo", "killall", "mDNSResponder")
  end

  def resolver_configured?
    RESOLVER_FILE.exist? && File.read(RESOLVER_FILE) == resolver_contents
  end

  def resolver_contents; <<-EOS.gsub(/^    /, '')
    # Generated by dinghy
    nameserver 127.0.0.1
    port 19322
    EOS
  end

  protected

  def command
    [
      "#{BREW}/sbin/dnsmasq",
      "--no-daemon",
      "--listen-address=127.0.0.1",
      "--port=19322",
      "--bind-interfaces",
      "--no-resolv",
      "--address=/.docker/#{machine.vm_ip}"
    ]
  end
end
